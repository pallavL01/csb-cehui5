{"version":3,"sources":["src/BudgetTracker.js","src/index.js"],"names":["BudgetTracker","querySelectorString","root","document","querySelector","innerHTML","html","addEventListener","onNewEntryBtnClick","load","entries","JSON","parse","localStorage","getItem","entry","addEntry","updateSummary","total","getEntryRows","reduce","row","value","totalFormatted","Intl","NumberFormat","style","currency","format","textContent","data","map","date","description","type","amount","parseFloat","setItem","stringify","insertAdjacentHTML","entryHtml","Date","toISOString","replace","e","onDeleteEntryBtnClick","querySelectorAll","forEach","input","save","Array","from","target","closest","remove"],"mappings":"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","file":"src.1b55cf2d.js","sourceRoot":"..","sourcesContent":["export default class BudgetTracker {\n  constructor(querySelectorString) {\n    this.root = document.querySelector(querySelectorString);\n    this.root.innerHTML = BudgetTracker.html();\n\n    this.root.querySelector(\".new-entry\").addEventListener(\"click\", () => {\n      this.onNewEntryBtnClick();\n    });\n\n    // Load initial data from Local Storage\n    this.load();\n  }\n\n  static html() {\n    return `\n          <table class=\"budget-tracker\">\n              <thead>\n                  <tr>\n                      <th>Date</th>\n                      <th>Description</th>\n                      <th>Type</th>\n                      <th>Amount</th>\n                      <th></th>\n                  </tr>\n              </thead>\n              <tbody class=\"entries\"></tbody>\n              <tbody>\n                  <tr>\n                      <td colspan=\"5\" class=\"controls\">\n                          <button type=\"button\" class=\"new-entry\">New Entry</button>\n                      </td>\n                  </tr>\n              </tbody>\n              <tfoot>\n                  <tr>\n                      <td colspan=\"5\" class=\"summary\">\n                          <strong>Total:</strong>\n                          <span class=\"total\">$0.00</span>\n                      </td>\n                  </tr>\n              </tfoot>\n          </table>\n      `;\n  }\n\n  static entryHtml() {\n    return `\n          <tr>\n              <td>\n                  <input class=\"input input-date\" type=\"date\">\n              </td>\n              <td>\n                  <input class=\"input input-description\" type=\"text\" placeholder=\"Add a Description (e.g. wages, bills, etc.)\">\n              </td>\n              <td>\n                  <select class=\"input input-type\">\n                      <option value=\"income\">Income</option>\n                      <option value=\"expense\">Expense</option>\n                  </select>\n              </td>\n              <td>\n                  <input type=\"number\" class=\"input input-amount\">\n              </td>\n              <td>\n                  <button type=\"button\" class=\"delete-entry\">&#10005;</button>\n              </td>\n          </tr>\n      `;\n  }\n\n  load() {\n    const entries = JSON.parse(\n      localStorage.getItem(\"budget-tracker-entries-dev\") || \"[]\"\n    );\n\n    for (const entry of entries) {\n      this.addEntry(entry);\n    }\n\n    this.updateSummary();\n  }\n\n  updateSummary() {\n    const total = this.getEntryRows().reduce((total, row) => {\n      const amount = row.querySelector(\".input-amount\").value;\n      const isExpense = row.querySelector(\".input-type\").value === \"expense\";\n      const modifier = isExpense ? -1 : 1;\n\n      return total + amount * modifier;\n    }, 0);\n\n    const totalFormatted = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\"\n    }).format(total);\n\n    this.root.querySelector(\".total\").textContent = totalFormatted;\n  }\n\n  save() {\n    const data = this.getEntryRows().map((row) => {\n      return {\n        date: row.querySelector(\".input-date\").value,\n        description: row.querySelector(\".input-description\").value,\n        type: row.querySelector(\".input-type\").value,\n        amount: parseFloat(row.querySelector(\".input-amount\").value)\n      };\n    });\n\n    localStorage.setItem(\"budget-tracker-entries-dev\", JSON.stringify(data));\n    this.updateSummary();\n  }\n\n  addEntry(entry = {}) {\n    this.root\n      .querySelector(\".entries\")\n      .insertAdjacentHTML(\"beforeend\", BudgetTracker.entryHtml());\n\n    const row = this.root.querySelector(\".entries tr:last-of-type\");\n\n    row.querySelector(\".input-date\").value =\n      entry.date || new Date().toISOString().replace(/T.*/, \"\");\n    row.querySelector(\".input-description\").value = entry.description || \"\";\n    row.querySelector(\".input-type\").value = entry.type || \"income\";\n    row.querySelector(\".input-amount\").value = entry.amount || 0;\n    row.querySelector(\".delete-entry\").addEventListener(\"click\", (e) => {\n      this.onDeleteEntryBtnClick(e);\n    });\n\n    row.querySelectorAll(\".input\").forEach((input) => {\n      input.addEventListener(\"change\", () => this.save());\n    });\n  }\n\n  getEntryRows() {\n    return Array.from(this.root.querySelectorAll(\".entries tr\"));\n  }\n\n  onNewEntryBtnClick() {\n    this.addEntry();\n  }\n\n  onDeleteEntryBtnClick(e) {\n    e.target.closest(\"tr\").remove();\n    this.save();\n  }\n}\n","import \"./styles.css\";\n\nimport BudgetTracker from \"./BudgetTracker.js\";\n\nnew BudgetTracker(\"#app\");\n"]}